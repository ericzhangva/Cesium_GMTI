/**
 * 5.3.7.4.1: Navigational and IFF PDU. COMPLETE
 *
 * Copyright (c) 2008-2013, MOVES Institute, Naval Postgraduate School. All rights reserved.
 * This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
 *
 * @author DMcG
 */
if (typeof dis === "undefined")
 dis = {};

 dis.IffAtcNavAidsLayer1Pdu = function()
{
   /** The version of the protocol. 5=DIS-1995, 6=DIS-1998. */
   this.protocolVersion = 6;

   /** Exercise ID */
   this.exerciseID = 0;

   /** Type of pdu, unique for each PDU class */
   this.pduType = 28;

   /** value that refers to the protocol family, eg SimulationManagement, et */
   this.protocolFamily = 6;

   /** Timestamp value */
   this.timestamp = 0;

   /** Length, in bytes, of the PDU. Changed name from length to avoid use of Hibernate QL reserved word */
   this.pduLength = 0;

   /** zero-filled array of padding */
   this.padding = 0;

   /** ID of the entity that is the source of the emissions */
   this.emittingEntityId = new dis.EntityID(); 

   /** Number generated by the issuing simulation to associate realted events. */
   this.eventID = new dis.EventID(); 

   /** Location wrt entity. There is some ambugiuity in the standard here, but this is the order it is listed in the table. */
   this.location = new dis.Vector3Float(); 

   /** System ID information */
   this.systemID = new dis.SystemID(); 

   /** padding */
   this.pad2 = 0;

   /** fundamental parameters */
   this.fundamentalParameters = new dis.IffFundamentalData(); 

  this.initFromBinaryDIS = function(inputStream)
  {

       this.protocolVersion = inputStream.readUByte();
       this.exerciseID = inputStream.readUByte();
       this.pduType = inputStream.readUByte();
       this.protocolFamily = inputStream.readUByte();
       this.timestamp = inputStream.readInt();
       this.pduLength = inputStream.readUShort();
       this.padding = inputStream.readShort();
       this.emittingEntityId.initFromBinaryDIS(inputStream);
       this.eventID.initFromBinaryDIS(inputStream);
       this.location.initFromBinaryDIS(inputStream);
       this.systemID.initFromBinaryDIS(inputStream);
       this.pad2 = inputStream.readUShort();
       this.fundamentalParameters.initFromBinaryDIS(inputStream);
  }

  this.encodeToBinaryDIS = function(outputStream)
  {

       outputStream.writeUByte(this.protocolVersion);
       outputStream.writeUByte(this.exerciseID);
       outputStream.writeUByte(this.pduType);
       outputStream.writeUByte(this.protocolFamily);
       outputStream.writeUInt(this.timestamp);
       outputStream.writeUShort(this.pduLength);
       outputStream.writeShort(this.padding);
       this.emittingEntityId.encodeToBinaryDIS(outputStream);
       this.eventID.encodeToBinaryDIS(outputStream);
       this.location.encodeToBinaryDIS(outputStream);
       this.systemID.encodeToBinaryDIS(outputStream);
       outputStream.writeUShort(this.pad2);
       this.fundamentalParameters.encodeToBinaryDIS(outputStream);
};
}; // end of class
